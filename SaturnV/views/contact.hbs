<head>
	<script src="https://cdn.rawgit.com/ckknight/random-js/master/lib/random.min.js"></script>
	<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=0">
	<style>
				@import url(https://fonts.googleapis.com/css?family=Jura|Nixie+One|Expletus+Sans);

		/*TILT*/
		#tilt {
		  -webkit-transition: all 0.5s ease;
		     -moz-transition: all 0.5s ease;
		       -o-transition: all 0.5s ease;
		      -ms-transition: all 0.5s ease;
		          transition: all 0.5s ease;
		}

		#tilt:hover {
		  transform: scale(1.05);
		}

		button {
		     background:none!important;
		     border:none; 
		     padding:0!important;
		     font: inherit;
		     /*border is optional*/ 
		     cursor: pointer;
		    color: white;
		}

		body{
		  background-color: rgba(0,0,0,.85);
		  color: #fff;
		  height: 100%;
		  padding: 0px;
		  margin: 0px;
		}

		.container {
		  padding: 50px;
		}

		canvas {
		  position: fixed;
		  width: 100%;
		  height: 100%;
		  top: 0;
		  opacity: .5;
		}

		.header, .description, .info {
		  position: relative;
		  z-index: 5;
		}

		.header {
		  border-left: 2px solid #fff;
		  padding: 5px 12px;
		}

		.description {
		  padding: 15px 0;
		  width: 40%;
		  min-width: 250px
		}

		.info {
		  position: relative;
		  padding: 5px 15px;
		  width: 250px;
		  margin: 10px 0;
		  cursor: crosshair;
		  
		  &:before, &:after {
		    content: '';
		    position: absolute;
		    height: 25px;
		    width: 25px;
		  }
		  
		  &:before {
		    left: 0;
		    top: 0;
		    border-left: 1px solid #fff;
		    border-top: 1px solid #fff;
		  }
		  &:after {
		    right: 0;
		    bottom: -5px;
		    border-right: 1px solid #fff;
		    border-bottom: 1px solid #fff;
		  }
		  &:hover::before, &:hover::after{
		    animation: borderBlink .25s step-end 3;    
		  }
		}

		.heading {
		  font-family: 'Expletus Sans', cursive;
		  font-style: normal;
		  font-weight: 400;
		  font-size: 36px;
		  text-transform: uppercase;
		  text-decoration: none;
		  letter-spacing: 0.007em;
		  word-spacing: 0.114em;
		  line-height: 1.13;
		}

		.tagline {
		  font-family: 'Nixie One', cursive;
		  font-style: normal;
		  font-weight: 400;
		  font-size: .95em;
		  text-transform: none;
		  text-decoration: none;
		  letter-spacing: 0.019em;
		  word-spacing: 0.072em;
		  line-height: 1.42;
		}

		.quote{
		  font-family: 'Jura', sans-serif;
		  font-style: normal;
		  font-weight: 300;
		  font-size: 24px;
		  text-transform: none;
		  text-decoration: none;
		  letter-spacing: 0em;
		  word-spacing: 0em;
		  line-height: 1.4;
		}

		.paragraph{
		  font-family: 'Nixie One', cursive;
		  font-style: normal;
		  font-weight: 400;
		  font-size: .95em;
		  text-transform: none;
		  text-decoration: none;
		  letter-spacing: 0.044em;
		  word-spacing: 0.023em;
		  line-height: 1.57;
		}



		//animations
		@keyframes borderBlink {    
		    from, to {    
		        border-color: #fff    
		    }    
		    50% {    
		        border-color: transparent    
		    }    
		}
	</style>
</head>

<div class="container">
  <div class="header">
    <div class="row">
    <div class="col-xs-6 col-xs-offset-3">
        <h1 style='font-size: 30px; font-family: Expletus Sans'>Create a Contact</h1>
            <form style="margin-top: 20px; margin-bottom: 20px" method="post">
              <div class="form-group">
                <input type="text" class="form-control" name="name" placeholder="Enter Name" value="{{contact.name}}" style='font-family: Expletus Sans; background:transparent;color:white; border-color:transparent'>
              </div>
              <div class="form-group">
                <input type="text" class="form-control" name="email" placeholder="Enter Email" style='font-family: Expletus Sans; background:transparent;color:white; border-color:transparent' value="{{contact.email}}" required>
              </div>
              <button id="tilt" type="submit" style='font-family: Expletus Sans; margin-top: 10px' class="btn btn-primary">Create</button>
            </form>
    </div>
</div>
<div id="tilt" style="text-decoration: none; color:white; font-family: Expletus Sans; margin-bottom: 15px">
        <a id="tilt" style="text-decoration: none; color:white; font-family: Expletus Sans; margin-bottom: 15px" class="btn btn-default" href="/">Proceed to orbital view</a>    
    </div>
  <div id="tilt" style="width:100%; text-align: left">
        <a id="tilt" href="/logout" style='text-decoration:none; color:white; font-family: Expletus Sans; margin-bottom: 15px'>Log Out</a>    
    </div>
    <h1 class="heading"></h1>
    <h3 class="tagline"></h3>
  </div>
  <div class="description">
    <p class="paragraph">
      
    </p>  
  </div>
 
</div>
<canvas id="canvas"></canvas>

<script>
		//infinite galaxy by
	//http://codepen.io/EduardoLopes/pen/rVjZwP

	const canvas = document.getElementById('canvas');
	const ctx = canvas.getContext('2d');
	const PI_TWO = Math.PI * 2;
	const TO_DEG = 180 / Math.PI;
	const TO_RAD = Math.PI / 180;

	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;

	var r = new Random(Random.engines.mt19937().autoSeed());

	//change to white
	function HSL(h = 0, s = 80, l = 95){
	  return `hsl(${h}, ${s}%, ${l}%)`
	}

	class Vector2{

	  constructor(x = 0, y = 0){
	    this.x = x;
	    this.y = y;
	  }

	}



	class Rectangle extends Vector2{
	  constructor(x, y){

	    super(x, y);

	    this.width = canvas.width;
	    this.height = canvas.height;

	    this.center = new Vector2(this.x + (this.width / 2), this.y + (this.height / 2));
	  }
	}


	const center = new Vector2(canvas.width / 2, canvas.height / 2);
	const camera = new Vector2(0,0);
	const mouse = new Vector2(0,0);

	class Dot{
	  constructor(options){

	    this.reset(options);
	    this.index = options.index;

	  }

	  reset(options){

	    this.position = new Vector2(options.x, options.y);
	    this.color = options.color;
	    this.radius = options.radius;
	    this.angle = options.angle;

	  }

	  getScreenPositionX(){
	    return this.position.x - camera.x;
	  }

	  getScreenPositionY(){
	    return this.position.y - camera.y;
	  }

	  update(){



	  }

	  draw(){

	    ctx.fillStyle = HSL(this.color);
	    ctx.beginPath();
	    ctx.arc(this.getScreenPositionX(), this.getScreenPositionY(), this.radius, PI_TWO, false);
	    ctx.closePath();
	    ctx.fill();

	  }

	}

	class Planet extends Dot{
	  constructor(options){

	    super(options);
	    this.system = options.system;
	    this.maxRadius = options.maxRadius;
	    this.rotatingSpeed = options.rotatingSpeed;
	    this.radius += 0.01;

	  }

	  update(){

	    if(this.system.dying == false || this.radius > 0.2){

	      this.angle += this.rotatingSpeed;
	      this.position.x = (this.system.position.x + Math.cos(this.angle) * this.system.radius);
	      this.position.y = (this.system.position.y + Math.sin(this.angle) * this.system.radius);

	      if(this.system.dying == false){
	        this.radius += (this.maxRadius - this.radius) * 0.01;
	      } else {
	        this.radius += (0 - this.radius) * 0.01;

	      }

	    }

	  }


	  draw(){

	    if(this.system.dying == false || this.radius > 0.2){
	      super.draw();
	    }

	  }
	}

	class PlanetSystem{
	  constructor(options){

	    this.planets = [];
	    this.position = new Vector2(options.x, options.y);
	    this.maxRadius = options.radius;
	    this.radius = 0;
	    this.dying = false;

	    // this.center = new Dot({
	    //   x: this.position.x,
	    //   y: this.position.y,
	    //   radius: 2,
	    //   color: 10,
	    //   angle: 0,
	    //   index: 0,
	    //   rotatingSpeed: 0
	    // });

	    for (let i = 0; i < options.planetCount; i++) {

	      let angle = ( i / options.planetCount ) * PI_TWO;

	      let x = this.position.x + Math.cos(angle) * this.radius;
	      let y = this.position.y + Math.sin(angle) * this.radius;

	      this.planets[i] = new Planet({
	        x: x,
	        y: y,
	        radius: 0,
	        maxRadius: options.planetsSize,
	        color: options.color,
	        angle: angle,
	        index: i,
	        system: this,
	        rotatingSpeed: options.rotatingSpeed
	      });

	    };

	  }

	  update(){

	    for (let i = 0; i < this.planets.length; i++) {
	      this.planets[i].update();
	    };

	    if(this.dying == false){
	      this.radius += (this.maxRadius - this.radius) * 0.05;
	    }

	  }

	  die(){

	    this.dying = true;

	    this.radius += (0 - this.radius) * 0.05;

	  }

	  draw(){

	    for (let i = 0; i < this.planets.length; i++) {
	      this.planets[i].draw();
	    };

	    //this.center.draw();

	  }

	}

	class Star{
	  constructor(options){

	    this.reset();

	  }

	  getScreenPositionX(){
	    return (this.x - camera.x) * this.scrollFactor;
	  }

	  getScreenPositionY(){
	    return (this.y - camera.y) * this.scrollFactor;
	  }

	  reset(){


	    this.scrollFactor = r.real(0.2, 1);

	    this.x = r.integer(camera.x * this.scrollFactor, (camera.x + canvas.width) * this.scrollFactor);
	    this.y = r.integer(camera.y * this.scrollFactor, (camera.y + canvas.height) * this.scrollFactor);

	    this.radius = 0;
	    this.color = r.integer(0,360);

	  }

	  update(){

	    if(this.getScreenPositionX() > canvas.width || this.getScreenPositionY() > canvas.height || this.getScreenPositionX() < 0 || this.getScreenPositionY() < 0) this.reset();

	    this.radius += (r.real(0.01,3) - this.radius) * 0.1;

	  }

	  draw(){
	    ctx.fillStyle = HSL(0, 90, 90);
	    ctx.fillRect(this.getScreenPositionX(), this.getScreenPositionY(), this.radius, this.radius);
	    ctx.fill();
	  }

	}


	class Galaxy{
	  constructor(x, y, quant = 10){
	    this.systems = [];
	    this.bounds = new Rectangle(x, y);
	    this.life = 0;

	    for (let i = 0; i < quant; i++) {
	      this.systems[i] = new PlanetSystem({
	        //x: r.integer(this.bounds.x, this.bounds.x + this.bounds.width) ,
	        //y: r.integer(this.bounds.y, this.bounds.y + this.bounds.height),
	        x: this.bounds.center.x,
	        y: this.bounds.center.y,
	        radius: r.integer(0, 360),
	        rotatingSpeed: r.bool() ? r.real(-0.002, -0.01) : r.real(0.001, 0.02),
	        planetCount: r.integer(2, 20),
	        color: r.integer(0, 360),
	        planetsSize: r.integer(1, 3)
	      });

	    };

	  }

	  update(){

	    for (let i = 0; i < this.systems.length; i++) {
	      this.systems[i].update();
	    };

	    this.life += app.elapsed;

	  }

	  die(){

	    for (let i = 0; i < this.systems.length; i++) {
	      this.systems[i].die();
	    };

	  }

	  draw(){

	    for (let i = 0; i < this.systems.length; i++) {
	      this.systems[i].draw();
	    };

	  }

	}

	function generateGalaraxy(){
	  return new Galaxy(r.integer(0, 2500), r.integer(0, 2500), r.integer(10, 40) );
	}

	class APP{
	  constructor(){

	    this.currentGalaxy = 0;
	    this.stars = [];

	    for (let i = 0; i < 100; i++) {
	      this.stars[i] = new Star({
	        angle: 0,
	        index: i
	      });
	    };



	    this.currentGalaxy = new Galaxy(0, 0, r.integer(10, 40) );
	    this.lastGalaxy = generateGalaraxy();

	    this.elapsed = 0;
	    this.lastTick = Date.now();

	    requestAnimationFrame(this.step.bind(this));

	  }

	  update(){

	    this.currentGalaxy.update();
	    this.lastGalaxy.update();
	    this.lastGalaxy.die();

	    camera.x += (this.currentGalaxy.bounds.center.x - (camera.x + center.x)) * 0.05;
	    camera.y += (this.currentGalaxy.bounds.center.y - (camera.y + center.y)) * 0.05;

	    if(this.currentGalaxy.life > 6){

	      this.radius += (this.maxRadius - this.radius) * 0.05;
	      this.lastGalaxy = this.currentGalaxy;
	      this.currentGalaxy = generateGalaraxy();
	    }

	    for (let i = 0; i < this.stars.length; i++) {
	      this.stars[i].update();
	    };

	  }

	  draw(){

	    this.currentGalaxy.draw();
	    this.lastGalaxy.draw();

	    for (let i = 0; i < this.stars.length; i++) {
	      this.stars[i].draw();
	    };

	  }

	  step(){
	    requestAnimationFrame(this.step.bind(this));

	    var delta = Date.now() - this.lastTick;
	    this.lastTick = Date.now();

	    var dt = delta / 1000;

	    this.elapsed = dt;

	    ctx.fillStyle = 'rgba(0,0,0,1)';
	    ctx.fillRect(0,0,canvas.width, canvas.height);

	    this.update();
	    this.draw();
	  }
	 
	}

	const app = new APP();

	window.addEventListener('resize', function(){
	  
	  canvas.width = window.innerWidth;
	  canvas.height = window.innerHeight;
	  
	  center.x = canvas.width / 2;
	  center.y = canvas.height / 2;
	  
	});
</script>